<?php

// Формат времени для popup.
define('REPORTS_DATE_FORMAT', 'Y-m-d');

/**
 * @return mixed
 */
function reports_drivers_menu() {
  // Отчеты по инструктажу машинистов
  $items['training-center/reports/drivers'] = array(
    'title'            => 'Отчеты по инструктажу машинистов',
    'page callback'    => 'reports_drivers_main_page',
    'access arguments' => array('access reports for drivers'),
    'type'             => MENU_CALLBACK,
  );
  // Отчет по статистике изучения документа
  $items['reports/drivers/stat'] = array(
    'title'            => 'Отчет по статистике изучения документа',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('reports_drivers_stat_form'),
    'access arguments' => array('access reports for drivers'),
    'type'             => MENU_CALLBACK,
    'file'             => 'reports_drivers.forms.inc',
  );
  // Персональный отчет машиниста по изучению документа
  $items['reports/drivers/personal'] = array(
    'title'            => 'Персональный отчет машиниста по изучению документа',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('reports_drivers_personal_form'),
    'access arguments' => array('access reports for drivers'),
    'type'             => MENU_CALLBACK,
    'file'             => 'reports_drivers.forms.inc'
  );

  // Оперативный отчет по инструктажу за сутки
  $items['reports/drivers/daily'] = array(
    'title'            => 'Оперативный отчет по инструктажу за сутки',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('reports_drivers_daily_form'),
    'access arguments' => array('access reports for drivers'),
    'type'             => MENU_CALLBACK,
    'file'             => 'reports_drivers.forms.inc',
  );
  // Вспомогательные страницы autocomplete
  $items['reports/drivers/autocomplete'] = array(
    'page callback'    => 'reports_drivers_autocomplete',
    'access arguments' => array('access reports for drivers'),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Главная страница отчетов.
 * @return string
 */
function reports_drivers_main_page() {

  $items['items'] = array(
    l('Отчет по статистике изучения документа', 'reports/drivers/stat'),
    l('Персональный отчет машиниста по изучению документа', 'reports/drivers/personal'),
    l('Оперативный отчет по инструктажу за сутки', 'reports/drivers/daily'),
  );

  return theme('item_list', $items);
}

/**
 * Implemets hook_permission.
 *
 * @return array
 */
function reports_drivers_permission() {
  return array(
    'access reports for drivers' => array(
      'title'       => t('Access reports for drivers'),
      'description' => t('Предоставление доступа к отчетам для машинистов'),
    ),
  );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Формирование данных для дальнейшей выгрузки
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Функция подготавливает массив $data для дальнейшей обработки и просмотра/выгрузки.
 * @param $doc_id
 * @param $start_date
 * @param $end_date
 *
 * @return bool|mixed
 */
function reports_drivers_stat_data($doc_id, $start_date, $end_date) {

  $data = reports_drivers_current_doc($doc_id, $start_date, $end_date);

  if ($data) {
    foreach ($data as $key => $item) {
      $quiz_result = reports_drivers_quiz_result($item->doc_id, $item->uid);
      $data[$key]->quiz_passed = $quiz_result->is_passed;
      $data[$key]->quiz_count = $quiz_result->count;
      $data[$key]->overdue = reports_drivers_overdue($item->doc_created, $item->quiz_passed);
    }
    return $data;
  }
  else {
    return FALSE;
  }
}

/**
 * Подготовка данных для персональных отчетов
 * @param $user
 * @param $start_date
 * @param $end_date
 *
 * @return string
 */
function reports_drivers_personal_data($user, $start_date, $end_date) {

  $data = reports_drivers_user_docs($user, $start_date, $end_date);

  if ($data) {
    foreach ($data as $key => $item) {
      $quiz_result = reports_drivers_quiz_result($item->doc_id, $item->uid);
      $data[$key]->quiz_passed = $quiz_result->is_passed;
      $data[$key]->quiz_count = $quiz_result->count;
      $data[$key]->overdue = reports_drivers_overdue($item->doc_created, $item->quiz_passed);
    }

    return $data;
  }
  else {
    return FALSE;
  }
}

/**
 * Подготовка данных для оперативных отчетов за сутки
 * @return string
 */
function reports_drivers_daily_data($date) {
  $data = reports_drivers_daily($date);

  if ($data) {
    foreach ($data as $key => $item) {
      $quiz_result = reports_drivers_quiz_result($item->doc_id, $item->uid);
      $data[$key]->quiz_passed = $quiz_result->is_passed;
    }
    return $data;
  }
  else {
    return FALSE;
  }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Превью данных в html-таблице
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @param $caption
 * @param $headers
 * @param $doc_id
 * @param $start_date
 * @param $end_date
 * @return string
 */
function reports_drivers_stat_preview($caption, $headers, $doc_id, $start_date, $end_date) {
  foreach ($headers as $key => $header) {
    $headers[$key] = array(
      'data' => $header,
    );
  }

  $data = reports_drivers_stat_data($doc_id, $start_date, $end_date);

  if ($data) {
    foreach ($data as $key => $row) {
      $rows[] = array(
        array(
          'data' => $key + 1,
        ),
        array(
          'data' => $row->user_name,
        ),
        array(
          'data' => date(REPORTS_DATE_FORMAT, $row->signup_time),
        ),
        array(
          'data' => ($row->quiz_passed) ? date(REPORTS_DATE_FORMAT, $row->quiz_passed) : 'Не сдан',
        ),
        array(
          'data' => $row->quiz_count,
        ),
        array(
          'data' => round($row->overdue / 86400),
        ),
      );
    }

    $output = theme(
      'table', array(
                    // Шапка таблицы
                    'header'     => $headers,
                    // Тело таблицы
                    'rows'       => $rows,
                    // Заголовок таблицы
                    'caption'    => $caption,
                    // Атрибуты таблицы
                    'attributes' => array('width' => '100%', 'class' => array('reports')),
               )
    );

    return $output;
  }
  else {
    return '<div id="no-results">Нет результатов.</div>';;
  }


}

/**
 * @param $caption
 * @param $headers
 * @param $user
 * @param $start_date
 * @param $end_date
 * @return string
 */
function reports_drivers_personal_preview($caption, $headers, $user, $start_date, $end_date) {
  foreach ($headers as $key => $header) {
    $headers[$key] = array(
      'data' => $header,
    );
  }

  $data = reports_drivers_personal_data($user, $start_date, $end_date);

  if ($data) {
    foreach ($data as $key => $item) {
      $rows[] = array(
        array(
          'data' => $key + 1,
        ),
        array(
          'data' => $item->doc_name,
        ),
        array(
          'data' => date(REPORTS_DATE_FORMAT, $item->signup_time),
        ),
        array(
          'data' => ($item->quiz_passed) ? date(REPORTS_DATE_FORMAT, $item->quiz_passed) : 'Не сдан',
        ),
        array(
          'data' => $item->quiz_count,
        ),
        array(
          'data' => round($item->overdue / 86400),
        ),
      );
    }

    $output = theme(
      'table', array(
                    // Шапка таблицы
                    'header'     => $headers,
                    // Тело таблицы
                    'rows'       => $rows,
                    // Заголовок таблицы
                    'caption'    => $caption,
                    // Атрибуты таблицы
                    'attributes' => array('width' => '100%', 'class' => array('reports')),
               )
    );

    return $output;
  }
  else {
    return '<div id="no-results">Нет результатов.</div>';;
  }
}

/**
 * @param $caption
 * @param $headers
 * @param $date
 * @return string
 */
function reports_drivers_daily_preview($caption, $headers, $date) {
  foreach ($headers as $key => $header) {
    $headers[$key] = array(
      'data' => $header,
    );
  }

  $data = reports_drivers_daily_data($date);

  if ($data) {
    foreach ($data as $key => $row) {
      $rows[] = array(
        array(
          'data' => $key + 1,
        ),
        array(
          'data' => $row->user_name,
        ),
        array(
          'data' => $row->doc_name,
        ),
        array(
          'data' => date(REPORTS_DATE_FORMAT, $row->signup_time),
        ),
        array(
          'data' => ($row->quiz_passed) ? date(REPORTS_DATE_FORMAT, $row->quiz_passed) : 'Не сдан',
        ),
      );
    }

    $output = theme(
      'table', array(
                    // Шапка таблицы
                    'header'     => $headers,
                    // Тело таблицы
                    'rows'       => $rows,
                    // Заголовок таблицы
                    'caption'    => $caption,
                    // Атрибуты таблицы
                    'attributes' => array('width' => '100%', 'class' => array('reports')),
               )
    );

    return $output;
  }
  else {
    return '<div id="no-results">Нет результатов.</div>';;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Возвращает список Направлений
 * @return mixed
 */
function reports_drivers_directions() {
  $query = db_select('node', 'n')
    ->condition('n.type', 'direction')
    ->fields('n')
    ->execute()
    ->fetchAll();

  foreach ($query as $direction) {
    $result[$direction->nid] = $direction->title;
  }

  return $result;
}

/**
 * Возвращает список документов для указанного направления.
 * @param $id
 * @return mixed
 */
function reports_drivers_direction_docs($id) {
  $query = db_select('field_data_field_direction', 'fdr');
  $query->join('field_data_field_date', 'fd', 'fdr.entity_id = fd.field_date_target_id');
  $query->join('node', 'n', 'n.nid = fdr.entity_id');
  $query->join('node', 'n2', 'fd.entity_id = n2.nid');
  $query->condition('fdr.field_direction_target_id', $id);
  $query->condition('n.status', 1);
  $query->condition('n2.status', 1);
  $query->fields('n2');
  $result = $query->execute()->fetchAll();

  foreach ($result as $item) {
    $docs[$item->nid] = $item->title;
  }

  return $docs;
}

/**
 * Возвращает результаты для конкретного документа за указанный период времени.
 * @param $doc_id
 * @param $start_date
 * @param $end_date
 *
 * @return mixed
 */
function reports_drivers_current_doc($doc_id, $start_date, $end_date) {
  $flag_signup = flag_get_flag('signup');

  $query = db_select('field_data_field_user_full_name', 'ufn');
  $query->join('flag_content', 'f', 'ufn.entity_id = f.uid');
  $query->join('node', 'n', 'n.nid = f.content_id');
  $db_and = db_and();
  $db_and->condition('n.nid', $doc_id);
  $db_and->condition('f.fid', $flag_signup->fid);
  $db_and->condition('f.timestamp', array($start_date, $end_date), 'BETWEEN');
  $query->condition($db_and);
  $query->addField('n', 'title', 'doc_name');
  $query->addField('n', 'nid', 'doc_id');
  $query->addField('n', 'created', 'doc_created');
  $query->addField('ufn', 'field_user_full_name_value', 'user_name');
  $query->addField('f', 'uid', 'uid');
  $query->addField('f', 'timestamp', 'signup_time');
  $result = $query->execute()->fetchAll();

  return $result;
}

/**
 * Возвращает список документов, на которые подписан пользователь за указанный период.
 * @param $user
 * @param $start_date
 * @param $end_date
 *
 * @return mixed
 */
function reports_drivers_user_docs($user, $start_date, $end_date) {
  $flag_signup = flag_get_flag('signup');

  $query = db_select('field_data_field_user_full_name', 'ufn');
  $query->join('flag_content', 'f', 'ufn.entity_id = f.uid');
  $query->join('node', 'n', 'n.nid = f.content_id');
  $db_and = db_and();
  $db_and->condition('field_user_full_name_value', $user);
  $db_and->condition('f.fid', $flag_signup->fid);
  $db_and->condition('f.timestamp', array($start_date, $end_date), 'BETWEEN');
  $query->condition($db_and);
  $query->distinct();
  $query->addField('n', 'title', 'doc_name');
  $query->addField('n', 'nid', 'doc_id');
  $query->addField('n', 'created', 'doc_created');
  $query->addField('f', 'uid', 'uid');
  $query->addField('f', 'timestamp', 'signup_time');
  $result = $query->execute()->fetchAll();

  return $result;
}


/**
 * Возращает результаты за указанный период времени
 * @param $date
 * @return mixed
 */
function reports_drivers_daily($date) {
  $interval = array($date, $date + 86400);
  $flag_signup = flag_get_flag('signup');

  $query = db_select('flag_content', 'f');
  $query->join('node', 'n', 'n.nid = f.content_id');
  $query->join('field_data_field_user_full_name', 'ufn', 'ufn.entity_id = f.uid');
  $query->condition('f.fid', $flag_signup->fid);
  $query->condition('f.timestamp', $interval, 'BETWEEN');
  $query->condition('n.type', 'doc_for_drivers');
  $query->addField('ufn', 'field_user_full_name_value', 'user_name');
  $query->addField('f', 'uid', 'uid');
  $query->addField('n', 'title', 'doc_name');
  $query->addField('n', 'nid', 'doc_id');
  $query->addField('f', 'timestamp', 'signup_time');
  $result = $query->execute()->fetchAll();

  return $result;
}

/**
 * Возвращает результаты теста указанного документа и пользователя.
 * @param $id
 * @param $uid
 *
 * @return stdClass
 */
function reports_drivers_quiz_result($id, $uid) {
  $data = new stdClass();

  $query = db_select('node', 'n');
  $query->join('field_data_field_lesson', 'fl', 'n.nid = fl.field_lesson_target_id');
  $query->join('quiz_node_results', 'qnr', 'fl.entity_id = qnr.nid');
  $query->condition('n.nid', $id);
  $query->condition('qnr.uid', $uid);
  $query->fields('qnr');
  $data->count = $query->countQuery()->execute()->fetchField();
  $quiz_results = $query->execute()->fetchObject();

  // Если есть результаты
  if ($quiz_results) {
    $quiz_nid = $quiz_results->nid;
    $quiz_vid = $quiz_results->vid;
    // Сдан ли данный тест
    $is_passed_quiz = quiz_is_passed($uid, $quiz_nid, $quiz_vid);
    if ($is_passed_quiz == TRUE) {
      $data->is_passed = $quiz_results->time_end;
    }
    else {
      $data->is_passed = FALSE;
    }
  }
  else {
    $data->is_passed = FALSE;
  }
  return $data;
}

/**
 * Возвращает количество просроченных дней. Т.к. в drupal нет данных о времени публикации, используем время создания
 * документа.
 * @param      $doc_created
 * @param null $quiz_passed
 *
 * @return int|null
 */
function reports_drivers_overdue($doc_created, $quiz_passed = NULL) {

  $limit = 86400 * 10;

  if ($quiz_passed) {
    $overdue = $quiz_passed - $doc_created - $limit;
    $overdue = ($overdue > 0) ? $overdue : 0;
    return $overdue;
  }
  else {
    return (time() - $doc_created - $limit);
  }
}

/**
 * Автокомплит для поиска машинистов. Возвращает список машинистов.
 * @param $string
 */
function reports_drivers_autocomplete($string) {
  // ID локомотивных бригад
  $gids = array(144, 145, 146);

  $query = db_select('field_data_field_user_full_name', 'ufn');
  $query->join('og_membership', 'om', 'ufn.entity_id = om.etid');
  $query->join('og', 'o', 'o.gid = om.gid');
  $query->fields('o', array('label'));
  $query->fields('ufn', array('field_user_full_name_value', 'entity_id'));
  $query->condition('ufn.field_user_full_name_value', '%' . db_like($string) . '%', 'LIKE');
  $query->condition('om.gid', $gids, 'IN');
  $query->range(0, 20);
  $result = $query->execute()->fetchAll();
  $matches = array();
  foreach ($result as $row) {
    $matches[$row->field_user_full_name_value]
      = check_plain($row->field_user_full_name_value) . '<span style="color: #999">&nbsp;|&nbsp;' . check_plain(
        $row->label
      ) . '</span>';
  }

  drupal_json_output($matches);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Экспорт в Excel
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Функция делает выгрузку в Excel
 *
 * @param $form
 * @param $form_state
 */
function reports_drivers_stat_export($form, $form_state) {
  $caption = $form_state['values']['fields']['caption'];
  $headers = $form_state['values']['headers'];
  $doc_id = $form_state['values']['fields']['doc'];
  $start_date = strtotime($form_state['values']['fields']['start_date']);
  $end_date = strtotime($form_state['values']['fields']['end_date']);

  $data = reports_drivers_stat_data($doc_id, $start_date, $end_date);

  if ($data) {
    foreach ($data as $key => $row) {
      $rows[$key] = array(
        $key + 1,
        $row->user_name,
        date(REPORTS_DATE_FORMAT, $row->signup_time),
        ($row->quiz_passed) ? date(REPORTS_DATE_FORMAT, $row->quiz_passed) : 'Не сдан',
        $row->quiz_count,
        round($row->overdue / 86400),
      );
    }

    $message = reports_drivers_export_xls($caption, $headers, $rows);

    drupal_set_message($message, 'status');
  }
  else {
    drupal_set_message('Нет результатов для выгрузки', 'error');
  }
}

/**
 * @param $form
 * @param $form_state
 */
function reports_drivers_personal_export($form, $form_state) {
  $caption = $form_state['values']['caption'];
  $headers = $form_state['values']['headers'];
  $user = $form_state['values']['fullname'];
  $start_date = strtotime($form_state['values']['start_date']);
  $end_date = strtotime($form_state['values']['end_date']);

  $data = reports_drivers_personal_data($user, $start_date, $end_date);

  if ($data) {
    foreach ($data as $key => $row) {
      $rows[$key] = array(
        $key + 1,
        $row->doc_name,
        date(REPORTS_DATE_FORMAT, $row->signup_time),
        ($row->quiz_passed) ? date(REPORTS_DATE_FORMAT, $row->quiz_passed) : 'Не сдан',
        $row->quiz_count,
        round($row->overdue / 86400),
      );
    }

    $message = reports_drivers_export_xls($caption, $headers, $rows);

    drupal_set_message($message, 'status');
  }
  else {
    drupal_set_message('Нет результатов для выгрузки', 'error');
  }
}

/**
 * @param $form
 * @param $form_state
 */
function reports_drivers_daily_export($form, $form_state) {
  $caption = $form_state['values']['caption'];
  $headers = $form_state['values']['headers'];
  $date = strtotime($form_state['values']['date']);

  $data = reports_drivers_daily_data($date);

  if ($data) {
    foreach ($data as $key => $row) {
      $rows[$key] = array(
        $key + 1,
        $row->user_name,
        $row->doc_name,
        date(REPORTS_DATE_FORMAT, $row->signup_time),
        ($row->quiz_passed) ? date(REPORTS_DATE_FORMAT, $row->quiz_passed) : 'Не сдан',
      );
    }

    $message = reports_drivers_export_xls($caption, $headers, $rows);

    drupal_set_message($message, 'status');
  }
  else {
    drupal_set_message('Нет результатов для выгрузки', 'error');
  }
}

/**
 * Экспорт в Excel
 *
 * @param $caption
 *  Заголовок таблицы
 * @param $headers
 *  Заголовки столбцов
 * @param $data
 *  Данные
 */

function reports_drivers_export_xls($caption, $headers, $data) {

  $module_path = drupal_get_path('module', 'reports_drivers');

  require 'Classes/PHPExcel.php';

  // Стили
  $styleCaption = array(
    'font' => array(
      'bold'  => TRUE,
      'color' => array('rgb' => '3366CC'),
    )
  );

  $inputFileName = $module_path . '/blank_1.xlsx';

  /** Load $inputFileName to a PHPExcel Object **/
  $objPHPExcel = PHPExcel_IOFactory::load($inputFileName);
  // Заголовки для выгрузки
  //header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
  //header('Content-Disposition: attachment;filename="your_name.xls"');
  //header('Cache-Control: max-age=0');

  $objPHPExcel->getActiveSheet()->setTitle('Отчет');


  $objPHPExcel->setActiveSheetIndex(0)
    ->setCellValue('A1', $caption)
    ->getStyle('A1')->applyFromArray($styleCaption);

  $objPHPExcel->getActiveSheet()
    ->fromArray($headers, 'data', 'A2')
    ->getStyle('A1')->applyFromArray($styleCaption);

  // Записываем данные
  $objPHPExcel->getActiveSheet()
    ->fromArray($data, NULL, 'A3');


  $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
  // Без этой функции не происходит автоматическая загрузка.
  //ob_end_clean();
  //$objWriter->save('php://output');
  $dir = variable_get('file_public_path', conf_path() . '/files/reports/');
  $filename = time() . '.xlsx';
  $objWriter->save($dir . $filename);

  return "Вы можете скачать файл выгрузки <a href=/" . $dir . $filename . ">здесь</a>";
}
