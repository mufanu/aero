<?php

function reports_menu() {
  $items['reports'] = array(
    'title' => 'Отчеты',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reports_form'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function reports_form($form, &$form_state) {

  if (isset($_GET['date'])) {
    $date = $_GET['date'];
  }

  if (isset($_GET['date2'])) {
    $date2 = $_GET['date2'];
  }


  $form = array();

  $now = date('Y-m-d');

  $format = 'Y-m-d';

  $form['date'] = array(
    '#type' => 'date_popup',
    // types 'date_text' and 'date_timezone' are also supported. See .inc file.
    '#title' => t('Start date'),
    '#default_value' => $now,
    '#date_format' => $format,
    '#date_label_position' => 'within',
    // See other available attributes and what they do in date_api_elements.inc
    '#date_timezone' => 'America/Chicago',
    // Optional, if your date has a timezone other than the site timezone.
    '#date_increment' => 15,
    // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
    '#date_year_range' => '-3:+3',
    // Optional, used to set the year range (back 3 years and forward 3 years is the default).
    '#datepicker_options' => array(),
    // Optional, as of 7.x-2.6+, used to pass in additional parameters from the jQuery Datepicker widget.
  );

  $form['date2'] = array(
    '#type' => 'date_popup',
    // types 'date_text' and 'date_timezone' are also supported. See .inc file.
    '#title' => t('End date'),
    '#default_value' => $now,
    '#date_format' => $format,
    '#date_label_position' => 'within',
    // See other available attributes and what they do in date_api_elements.inc
    '#date_timezone' => 'America/Chicago',
    // Optional, if your date has a timezone other than the site timezone.
    '#date_increment' => 15,
    // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
    '#date_year_range' => '-3:+3',
    // Optional, used to set the year range (back 3 years and forward 3 years is the default).
    '#datepicker_options' => array(),
    // Optional, as of 7.x-2.6+, used to pass in additional parameters from the jQuery Datepicker widget.
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Сформировать'),
  );

  if (isset($_GET['date'])) {
    $form['table'] = array(
      '#markup' => reports_flagged($date, $date2),
    );
  }

  //dpm($form);

  return $form;
}

/**
 * @param $form
 * @param $form_state
 * @return string
 */
function reports_form_submit($form, &$form_state) {
  //dpm($form_state);
  $date = strtotime($form_state['values']['date']);
  $date2 = strtotime($form_state['values']['date2']);

  $form_state['redirect'] = array(
    'reports',
    array(
      'query' => array(
        'date' => $date,
        'date2' => $date2,
      ),
    ),
  );

  return reports_flagged($date, $date2);
}

/**
 * Функция получает все отмеченные флагом материалы за указанный период $date - $date2
 * @param $date
 * @param $date2
 * @return string
 */
function reports_flagged($date, $date2) {
  // Флаг подписки
  $flag_signup = flag_get_flag('signup');

  // Отмеченные материалы
  $query = db_select('flag_content', 'f');
  // Пользователи отметишие
  //$query->join('users', 'u', 'f.uid = u.uid');
  // Id курса
  $query->join('field_data_field_course2', 'fc', 'f.content_id = fc.entity_id');
  // ID блока
  //$query->join('field_data_field_block', 'fb', 'fc.field_course2_target_id = fb.entity_id');
  // Получаем ФИО
  //$query->join('field_data_field_user_full_name', 'ufn', 'ufn.entity_id = u.uid');
  // Должность
  //$query->join('field_data_field_user_position', 'up', 'up.entity_id = u.uid');
  // Офис
  //$query->join('field_data_field_user_office', 'uo', 'uo.entity_id = u.uid');
  // Название курса
  $query->join('node', 'n', 'fc.field_course2_target_id = n.nid');
  // Условия
  $db_and = db_and();
  $db_and->condition('f.timestamp', array($date, $date2), 'BETWEEN');
  $db_and->condition('f.fid', $flag_signup->fid);
  //$db_and->condition('n.type', 'lesson');
  $query->condition($db_and);
  // Поля

  //$query->addField('n', 'title', 'course_name');
  $query->addField('n', 'nid', 'course_id');
  //$query->addField('f', 'content_id', 'lesson_id');

  $result = $query->execute()->fetchAll();

  dpm($result);

  // id курсов, на которые были подписаны за указанный период.
  foreach ($result as $key => $item) {
    $array[] = $item->course_id;
  }

  $courses = array_unique($array);



  dpm($array);

  //return reports_is_first_lesson($result);
}

function reports_is_first_lesson($data) {

  return reports_get_courses($data);

}

/**
 * Функция отбирает только уникальные элементы, т.е. уникальные id курсов.
 * @param $data
 */
function reports_get_courses($data) {

  if (isset($_GET['date'])) {
    $date = $_GET['date'];
  }

  if (isset($_GET['date2'])) {
    $date2 = $_GET['date2'];
  }

  // Флаг подписки
  $flag_signup = flag_get_flag('signup');
  //dpm($data);




  foreach ($courses as $course) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_course2', 'fc', 'fc.entity_id = n.nid');
    $query->join('field_data_field_block', 'fb', 'fc.field_course2_target_id = fb.entity_id');
    $query->condition('fc.field_course2_target_id', $course);
    $query->orderBy('n.title', 'ASC');
    $query->range(0, 1);
    $query->addField('fb', 'field_block_target_id', 'block_id');
    $query->addField('fc', 'field_course2_target_id', 'course_id');
    $query->addField('n', 'nid', 'lesson_id');
    $result[] = $query->execute()->fetchObject();
  }

  foreach ($result as $course2) {
    $query2 = db_select('node', 'n');
    $query2->join('flag_content', 'f', 'f.content_id = n.nid');
    // Пользователи отметишие
    $query2->join('users', 'u', 'f.uid = u.uid');
    // Получаем ФИО
    $query2->join('field_data_field_user_full_name', 'ufn', 'ufn.entity_id = u.uid');
    $db_and = db_and();
    $db_and->condition('f.content_id', $course2->lesson_id);
    $db_and->condition('f.fid', $flag_signup->fid);
    $db_and->condition('f.timestamp', array($date, $date2), 'BETWEEN');
    $query2->condition($db_and);
    $query2->addField('n', 'title', 'title');
    $query2->addField('ufn', 'field_user_full_name_value', 'fullname');
    $query2->addField('f', 'timestamp', 'signup_time');
    $result2 = $query2->execute()->fetchAll();
  }
  dpm($result2);

  return reports_output($result2);


}

function reports_output($data) {

  //Дальше создаем таблицу и выводим полученные данные
  // Создаем   заголовок таблицы
  $caption = t('Отчет');
  // Создаем заголовки столбцов
  $header = array(
    array(
      'data' => t('№'),
    ),
    array(
      'data' => t('Название блока'),
    ),
    array(
      'data' => t('Название курса'),
    ),
    array(
      'data' => t('ФИО пользователя'),
    ),
    array(
      'data' => t('Должность'),
    ),
    array(
      'data' => t('Отдел'),
    ),
    array(
      'data' => t('Офис'),
    ),
    array(
      'data' => t('Дата подписки'),
    ),
    array(
      'data' => t('Дата завершения курса'),
    ),
  );

  foreach ($data as $key => $item) {
    $rows[] = array(
      array(
        'data' => $key + 1,
      ),
      array(
        'data' => '',
      ),
      array(
        'data' => $item->title,
      ),
      array(
        'data' => $item->fullname,
      ),
      array(
        'data' => '',//$item->position,
      ),
      array(
        'data' => '',
      ),
      array(
        'data' => '',//$item->office,
      ),
      array(
        'data' => date('d.m.Y', $item->signup_time),
      ),
      array(
        'data' => 'Не завершен',
      ),
    );
  }

  //dpm($rows);

  $output = theme('table', array(
      // Шапка таблицы
      'header' => $header,
      // Тело таблицы
      'rows' => $rows,
      // Заголовок таблицы
      'caption' => $caption,
      // Атрибуты таблицы
      'attributes' => array('width' => '100%')
    )
  );

  return $output;
}

/*
function reports_form_submit($form, &$form_state) {
  $form_state['redirect'] = array(
    'reports',
    array(
      'query' => array(
        'direction' => $form_state['input']['direction_'],
      ),
    ),
  );
}


/*
function reports_form_reports_form_alter($form, &$form_state) {
  return $form['direction2']['#disabled'] = FALSE;
  //$form_state['direction2']['rebuild'] = TRUE;

}

function reports_get_directions() {
  $query = db_select('node', 'n')
    ->condition('n.type', 'direction')
    ->fields('n')
    ->execute()
    ->fetchAll();

  foreach ($query as $direction) {
    $directions[$direction->nid] = $direction->title;
  }

  return $directions;
}


function reports_get_docs($nid) {
  $query = db_select('field_data_field_direction', 'f');
  $query->join('node', 'n', 'f.entity_id = n.nid');
  $query->condition('f.field_direction_target_id', $nid);
  $query->fields('n');
  $result = $query->execute()->fetchAll();

  dpm($result);

  return $result;
}

function reports_output($nid) {
  $data = reports_get_docs($nid);

  //Дальше создаем таблицу и выводим полученные данные
  // Создаем   заголовок таблицы
  $caption = t('Отчет');
  // Создаем заголовки столбцов
  $header = array(
    // Первый столбец
    array(
      'data' => t('Документ'),
    ),
    array(
      'data' => t('Количество подписавщихся'),
    ),
    array(
      'data' => t('Количество сдавших тест'),
    ),
  );

  foreach ($data as $item) {
    $rows[] = array(
      array(
        'data' => $item->title,
      )
    );
  }

  $output = theme('table', array(
      // Шапка таблицы
      'header' => $header,
      // Тело таблицы
      'rows' => $rows,
      // Заголовок таблицы
      'caption' => $caption,
      // Атрибуты таблицы
      'attributes' => array('width' => '100%')
    )
  );

  return $output;
}
*/