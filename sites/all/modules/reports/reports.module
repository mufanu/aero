<?php
/**
 * @return mixed
 */
function reports_menu() {
  $items['reports'] = array(
    'title' => 'Отчеты',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reports_form'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function reports_form($form, &$form_state) {

  if (isset($_GET['start_date'])) {
    $start_date = $_GET['start_date'];
  } else {
    $start_date = date('Y-m-d');
  }

  if (isset($_GET['end_date'])) {
    $end_date = $_GET['end_date'];
  } else {
    $end_date = date('Y-m-d');
  }

  $form = array();

  $format = 'Y-m-d';

  $form['start_date'] = array(
    '#type' => 'date_popup',
    // types 'date_text' and 'date_timezone' are also supported. See .inc file.
    '#title' => t('Start date'),
    '#default_value' => $start_date,
    '#date_format' => $format,
    '#date_label_position' => 'within',
    // See other available attributes and what they do in date_api_elements.inc
    '#date_timezone' => 'America/Chicago',
    // Optional, if your date has a timezone other than the site timezone.
    '#date_increment' => 15,
    // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
    '#date_year_range' => '-3:+3',
    // Optional, used to set the year range (back 3 years and forward 3 years is the default).
    '#datepicker_options' => array(),
    // Optional, as of 7.x-2.6+, used to pass in additional parameters from the jQuery Datepicker widget.
  );

  $form['end_date'] = array(
    '#type' => 'date_popup',
    // types 'date_text' and 'date_timezone' are also supported. See .inc file.
    '#title' => t('End date'),
    '#default_value' => $end_date,
    '#date_format' => $format,
    '#date_label_position' => 'within',
    // See other available attributes and what they do in date_api_elements.inc
    '#date_timezone' => 'America/Chicago',
    // Optional, if your date has a timezone other than the site timezone.
    '#date_increment' => 15,
    // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
    '#date_year_range' => '-3:+3',
    // Optional, used to set the year range (back 3 years and forward 3 years is the default).
    '#datepicker_options' => array(),
    // Optional, as of 7.x-2.6+, used to pass in additional parameters from the jQuery Datepicker widget.
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Сформировать'),
  );

  if (isset($_GET['start_date'])) {
    $form['table'] = array(
      '#markup' => reports_result($start_date, $end_date),
    );
  }

  return $form;
}

/**
 * @param $form
 * @param $form_state
 * @return string
 */
function reports_form_submit($form, &$form_state) {
  $start_date = strtotime($form_state['values']['start_date']);
  $end_date = strtotime($form_state['values']['end_date']);

  $form_state['redirect'] = array(
    'reports',
    array(
      'query' => array(
        'start_date' => $start_date,
        'end_date' => $end_date,
      ),
    ),
  );
}

function reports_result($start_date, $end_date) {
  $courses = reports_signup_courses($start_date, $end_date);
  $first_lesson_ids = reports_get_first_lesson_ids($courses);
  $result = reports_get_results($first_lesson_ids, $start_date, $end_date);
  //$add_block_name = reports_get_blocks($courses, $result);
  reports_get_last_lesson_ids($courses);

  return reports_output($result, $start_date, $end_date);
}

/**
 * Функция получает массив из уникальных id курсов, на которые были подписаны пользователи за указанный период $date - $date2.
 * На выходе массив из id курсов.
 * @param $start_date
 * @param $end_date
 * @return string
 */
function reports_signup_courses($start_date, $end_date) {
  $flag_signup = flag_get_flag('signup');
  $course_ids = array();

  $query = db_select('flag_content', 'f');
  $query->join('field_data_field_course2', 'fc', 'f.content_id = fc.entity_id');
  $db_and = db_and();
  $db_and->condition('f.timestamp', array($start_date, $end_date), 'BETWEEN');
  $db_and->condition('f.fid', $flag_signup->fid);
  $query->condition($db_and);
  $query->distinct();
  $query->addField('fc', 'field_course2_target_id', 'course_id');
  $result = $query->execute()->fetchAll();

  foreach ($result as $item) {
    $courses[] = $item->course_id;
  }

  return $courses;
}

/**
 * Функция ищет id первого урока для указанных курсов
 * @param $courses
 * @return string
 */
function reports_get_first_lesson_ids($courses) {

  foreach ($courses as $course_id) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_course2', 'fc', 'fc.entity_id = n.nid');
    $query->condition('fc.field_course2_target_id', $course_id);
    $query->orderBy('n.title');
    $query->range(0, 1);
    $query->fields('n', array('nid'));
    $results[] = $query->execute()->fetchField();
  }

  return $results;
}

function reports_get_last_lesson_ids($courses) {

  foreach ($courses as $course_id) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_course2', 'fc', 'fc.entity_id = n.nid');
    $query->condition('fc.field_course2_target_id', $course_id);
    $query->orderBy('n.title', 'DESC');
    $query->
    $query->range(0, 1);
    $query->fields('n', array('title'));
    $results[] = $query->execute()->fetchField();
  }

  dpm($results);

}

/**
 * Функция делает выборку по подписанным материалам с условиями.
 * @param $first_lesson_ids
 * @param $start_date
 * @param $end_date
 * @return string
 */
function reports_get_results($first_lesson_ids, $start_date, $end_date) {

  // Флаг подписки
  $flag_signup = flag_get_flag('signup');

  $query = db_select('flag_content', 'f');
  // Пользователи отметишие
  $query->join('users', 'u', 'f.uid = u.uid');
  // Получаем ФИО
  $query->join('field_data_field_user_full_name', 'ufn', 'ufn.entity_id = u.uid');
  // Должность
  $query->join('field_data_field_user_position', 'up', 'up.entity_id = u.uid');
  // Офис
  $query->join('field_data_field_user_office', 'uo', 'uo.entity_id = u.uid');
  // id курса
  $query->join('field_data_field_course2', 'fc', 'fc.entity_id = f.content_id');
  // Название блока
  $query->join('field_data_field_block', 'fb', 'fb.entity_id = fc.field_course2_target_id');
  $query->join('node', 'nb', 'nb.nid = fb.field_block_target_id');
  // Название курса
  $query->join('node', 'n', 'fc.field_course2_target_id = n.nid');
  // Отдел
  $query->join('field_data_group_audience', 'ga', 'ga.entity_id = u.uid');
  $query->join('og', 'o', 'o.gid = ga.group_audience_gid');
  $db_and = db_and();
  $db_and->condition('f.content_id', $first_lesson_ids, 'IN');
  $db_and->condition('f.fid', $flag_signup->fid);
  $db_and->condition('f.timestamp', array($start_date, $end_date), 'BETWEEN');
  $query->condition($db_and);
  $query->addField('nb', 'title', 'block_name');
  $query->addField('n', 'title', 'course_name');
  $query->addField('ufn', 'field_user_full_name_value', 'fullname');
  $query->addField('up', 'field_user_position_value', 'position');
  $query->addField('o', 'label', 'department');
  $query->addField('uo', 'field_user_office_value', 'office');
  $query->addField('f', 'timestamp', 'signup_time');
  $results = $query->execute()->fetchAll();

  return $results;
}


/**
 * @param $data
 * @param $start_date
 * @param $end_date
 * @return string
 */
function reports_output($data, $start_date, $end_date) {

  //Дальше создаем таблицу и выводим полученные данные
  // Создаем   заголовок таблицы
  $caption = t('Отчет за период ' . date('d.m.Y', $start_date) . '-' . date('d.m.Y', $end_date) . '.');
  // Создаем заголовки столбцов
  $header = array(
    array(
      'data' => t('№'),
    ),
    array(
      'data' => t('Название блока'),
    ),
    array(
      'data' => t('Название курса'),
    ),
    array(
      'data' => t('ФИО пользователя'),
    ),
    array(
      'data' => t('Должность'),
    ),
    array(
      'data' => t('Отдел'),
    ),
    array(
      'data' => t('Офис'),
    ),
    array(
      'data' => t('Дата подписки'),
    ),
    array(
      'data' => t('Дата завершения курса'),
    ),
  );

  foreach ($data as $key => $item) {
    $rows[] = array(
      array(
        'data' => $key + 1,
      ),
      array(
        'data' => $item->block_name,
      ),
      array(
        'data' => $item->course_name,
      ),
      array(
        'data' => $item->fullname,
      ),
      array(
        'data' => $item->position,
      ),
      array(
        'data' => $item->department,
      ),
      array(
        'data' => $item->office,
      ),
      array(
        'data' => date('d.m.Y', $item->signup_time),
      ),
      array(
        'data' => 'Не завершен',
      ),
    );
  }

  //dpm($rows);

  $output = theme('table', array(
      // Шапка таблицы
      'header' => $header,
      // Тело таблицы
      'rows' => $rows,
      // Заголовок таблицы
      'caption' => $caption,
      // Атрибуты таблицы
      'attributes' => array('width' => '100%')
    )
  );

  return $output;
}